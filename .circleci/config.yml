---
version: 2.1

executors:
  build-executor:
    docker:
      - image: cimg/openjdk:17.0
        environment:
          MAVEN_OPTS: -Xmx1g
  system-test-executor:
    machine:
      image: ubuntu-2404:current
  go-executor:
    docker:
      - image: cimg/go:1.23

orbs:
  sign-packages: opennms/sign-packages@2.1.3
  branch-management: opennms/branch-management@2.3.0

commands:
  shallow-clone:
      description: "Quick shallow checkout (if possible)"
      steps:
        - run:
            name: git clone
            command: |
              install -d -m 700 ~/.ssh
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              ssh-keyscan -p 443 ssh.github.com >> ~/.ssh/known_hosts
              chmod 600 ~/.ssh/known_hosts
              git clone --no-checkout --filter=tree:0 "${CIRCLE_REPOSITORY_URL}" .
              if [ -n "${CIRCLE_TAG}" ]; then
                git checkout --force "${CIRCLE_TAG}"
                git reset --hard "${CIRCLE_SHA1}"
              else
                git checkout --force -B "${CIRCLE_BRANCH}" "${CIRCLE_SHA1}"
              fi
  build:
    description: "Build Cortex Plugin"
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Compile source without tests
          command: make
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - persist_to_workspace:
          root: ~/
          paths:
            - .m2
            - project

workflows:
  build-deploy:
    jobs:
      - build
      - tests:
          requires:
            - build
      - merge:
          requires:
            - tests
          filters:
            branches:
              only:
               - /^release-.*/
      - deploy:
          context:
            - OSSRH Principal
            - OpenNMS Build
            - "gpg-signing"
          requires:
            - tests
          filters:
            branches:
              only:
                - master
      - publish-github-release:
          context:
            - github-releases
          requires:
            - tests
          filters:
            tags:
              only:
                - /^v.*/
            branches:
              ignore: /.*/

jobs:
  build:
    executor: build-executor
    steps:
      - checkout
      - build

  tests:
    executor: system-test-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Set environment to Java 17
          command: sudo update-java-alternatives --set java-1.17.0-openjdk-amd64
      - run:
          name: Run system test with docker-compose
          command: make integration-tests
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/junit/ \;
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

      - persist_to_workspace:
          root: ~/
          paths:
            - project
  merge:
    executor: build-executor

    steps:
      - add_ssh_keys:
          fingerprints:
            - "27:c8:b4:c2:27:cf:78:ae:5f:1f:3a:ee:d7:bb:e8:ca"

      - shallow-clone
      - branch-management/merge-branch:
          committer_email: "cicd-system@opennms.com"
          committer_name: "CI/CD System"
          from: release-2.x
          to: master

      # make sure the build passes after merge
      - build

      - run:
          name: "Push to Master"
          command: git push --no-verify origin master:master

  deploy:
    executor: build-executor
    steps:
      - checkout

      - sign-packages/setup-env:
          skip_if_forked_pr: true
          gnupg_home: ~/.gnupg

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}

      - run:
          name: Upload snapshot
          command: |
            make maven-deploy

  publish-github-release:
    executor: go-executor
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install ghr tool to create GitHub releases and upload artifacts
          command: go install github.com/tcnksm/ghr@latest
      - run:
          name: Publish artifacts as GitHub release
          command: |
            export GITHUB_TOKEN="${GH_TOKEN}"
            mkdir github-release
            cp target/artifacts/opennms-cortex-tss-plugin.sha256 github-release
            cp target/artifacts/opennms-cortex-tss-plugin.tar.gz github-release
            ghr -r ${CIRCLE_PROJECT_REPONAME} $(cat target/artifacts/pom-version.txt) github-release
